--// Protected by Karrot 1.0 - discord.gg/vPY3XmntKU

return (function()local karrotlIIIIlIl = "\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110";local karrotlIIIIlIl = "\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110";local karrotlIIIIlIl = "\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110";local karrotlIIllllI=269;local karrotlIIlllIl=138;local karrotlIIlllII=3;local karrotlIIlIllI=function(a)local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';a=string.gsub(a,'[^'..b..'=]','')return a:gsub('.',function(c)if c=='='then return''end;local d,e='',b:find(c)-1;for f=6,1,-1 do d=d..(e%2^f-e%2^(f-1)>0 and'1'or'0')end;return d end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(c)if#c~=8 then return''end;local g=0;for f=1,8 do g=g+(c:sub(f,f)=='1'and 2^(8-f)or 0)end;return string.char(g)end)end;local karrotlIIlllIl=290;local karrotlIIlIlIl=(function()local function a(b)local c={}for d=0,255 do c[d]={}end;c[0][0]=b[1]*255;local e=1;for f=0,7 do for d=0,e-1 do for g=0,e-1 do local h=c[d][g]-b[1]*e;c[d][g+e]=h+b[2]*e;c[d+e][g]=h+b[3]*e;c[d+e][g+e]=h+b[4]*e end end;e=e*2 end;return c end;local i=a{0,1,1,0}local function j(self,k)local l,d,g=self.S,self.i,self.j;local m={}local n=string.char;for o=1,k do d=(d+1)%256;g=(g+l[d])%256;l[d],l[g]=l[g],l[d]m[o]=n(l[(l[d]+l[g])%256])end;self.i,self.j=d,g;return table.concat(m)end;local function p(self,q)local r=j(self,#q)local s={}local t=string.byte;local n=string.char;for d=1,#q do s[d]=n(i[t(q,d)][t(r,d)])end;return table.concat(s)end;local function u(self,v)local l=self.S;local g,w=0,#v;local t=string.byte;for d=0,255 do g=(g+l[d]+t(v,d%w+1))%256;l[d],l[g]=l[g],l[d]end end;function new(v)local l={}local s={S=l,i=0,j=0,generate=j,cipher=p,schedule=u}for d=0,255 do l[d]=d end;if v then s:schedule(v)end;return s end;return new end)();local fev=getfenv or function()return _ENV end;local karrotlIIlIlII=(function()if not bit then local bit_=nil pcall(function()bit_=require('bit') end)bit=bit_ end local bit=bit or bit32 or(function()local a={_TYPE='module',_NAME='bit.numberlua',_VERSION='0.3.1.20120131'}local b=math.floor;local c=2^32;local d=c-1;local function e(f)local g={}local h=setmetatable({},g)function g:__index(i)local j=f(i)h[i]=j;return j end;return h end;local function k(h,l)local function m(n,o)local p,q=0,1;while n~=0 and o~=0 do local r,s=n%l,o%l;p=p+h[r][s]*q;n=(n-r)/l;o=(o-s)/l;q=q*l end;p=p+(n+o)*q;return p end;return m end;local function t(h)local u=k(h,2^1)local v=e(function(n)return e(function(o)return u(n,o)end)end)return k(v,2^(h.n or 1))end;function a.tobit(w)return w%2^32 end;a.bxor=t{[0]={[0]=0,[1]=1},[1]={[0]=1,[1]=0},n=4}local x=a.bxor;function a.bnot(n)return d-n end;local y=a.bnot;function a.band(n,o)return(n+o-x(n,o))/2 end;local z=a.band;function a.bor(n,o)return d-z(d-n,d-o)end;local A=a.bor;local B,C;function a.rshift(n,D)if D<0 then return B(n,-D)end;return b(n%2^32/2^D)end;C=a.rshift;function a.lshift(n,D)if D<0 then return C(n,-D)end;return n*2^D%2^32 end;B=a.lshift;function a.tohex(w,E)E=E or 8;local F;if E<=0 then if E==0 then return''end;F=true;E=-E end;w=z(w,16^E-1)return('%0'..E..(F and'X'or'x')):format(w)end;local G=a.tohex;function a.extract(E,H,I)I=I or 1;return z(C(E,H),2^I-1)end;local J=a.extract;function a.replace(E,j,H,I)I=I or 1;local K=2^I-1;j=z(j,K)local L=y(B(K,H))return z(E,L)+B(j,H)end;local M=a.replace;function a.bswap(w)local n=z(w,0xff)w=C(w,8)local o=z(w,0xff)w=C(w,8)local N=z(w,0xff)w=C(w,8)local O=z(w,0xff)return B(B(B(n,8)+o,8)+N,8)+O end;local P=a.bswap;function a.rrotate(w,D)D=D%32;local Q=z(w,2^D-1)return C(w,D)+B(Q,32-D)end;local R=a.rrotate;function a.lrotate(w,D)return R(w,-D)end;local S=a.lrotate;a.rol=a.lrotate;a.ror=a.rrotate;function a.arshift(w,D)local T=C(w,D)if w>=0x80000000 then T=T+B(2^D-1,32-D)end;return T end;local U=a.arshift;function a.btest(w,V)return z(w,V)~=0 end;a.bit32={}local function W(w)return(-1-w)%c end;a.bit32.bnot=W;local function X(n,o,N,...)local T;if o then n=n%c;o=o%c;T=x(n,o)if N then T=X(T,N,...)end;return T elseif n then return n%c else return 0 end end;a.bit32.bxor=X;local function Y(n,o,N,...)local T;if o then n=n%c;o=o%c;T=(n+o-x(n,o))/2;if N then T=Y(T,N,...)end;return T elseif n then return n%c else return d end end;a.bit32.band=Y;local function Z(n,o,N,...)local T;if o then n=n%c;o=o%c;T=d-z(d-n,d-o)if N then T=Z(T,N,...)end;return T elseif n then return n%c else return 0 end end;a.bit32.bor=Z;function a.bit32.btest(...)return Y(...)~=0 end;function a.bit32.lrotate(w,D)return S(w%c,D)end;function a.bit32.rrotate(w,D)return R(w%c,D)end;function a.bit32.lshift(w,D)if D>31 or D<-31 then return 0 end;return B(w%c,D)end;function a.bit32.rshift(w,D)if D>31 or D<-31 then return 0 end;return C(w%c,D)end;function a.bit32.arshift(w,D)w=w%c;if D>=0 then if D>31 then return w>=0x80000000 and d or 0 else local T=C(w,D)if w>=0x80000000 then T=T+B(2^D-1,32-D)end;return T end else return B(w,-D)end end;function a.bit32.extract(w,H,...)local I=...or 1;if H<0 or H>31 or I<0 or H+I>32 then error'out of range'end;w=w%c;return J(w,H,...)end;function a.bit32.replace(w,j,H,...)local I=...or 1;if H<0 or H>31 or I<0 or H+I>32 then error'out of range'end;w=w%c;j=j%c;return M(w,j,H,...)end;a.bit={}function a.bit.tobit(w)w=w%c;if w>=0x80000000 then w=w-c end;return w end;local _=a.bit.tobit;function a.bit.tohex(w,...)return G(w%c,...)end;function a.bit.bnot(w)return _(y(w%c))end;local function a0(n,o,N,...)if N then return a0(a0(n,o),N,...)elseif o then return _(A(n%c,o%c))else return _(n)end end;a.bit.bor=a0;local function a1(n,o,N,...)if N then return a1(a1(n,o),N,...)elseif o then return _(z(n%c,o%c))else return _(n)end end;a.bit.band=a1;local function a2(n,o,N,...)if N then return a2(a2(n,o),N,...)elseif o then return _(x(n%c,o%c))else return _(n)end end;a.bit.bxor=a2;function a.bit.lshift(w,E)return _(B(w%c,E%32))end;function a.bit.rshift(w,E)return _(C(w%c,E%32))end;function a.bit.arshift(w,E)return _(U(w%c,E%32))end;function a.bit.rol(w,E)return _(S(w%c,E%32))end;function a.bit.ror(w,E)return _(R(w%c,E%32))end;function a.bit.bswap(w)return _(P(w%c))end;return a end)()local unpack=table.unpack or unpack;local a3;local a4;local a5;local a6=50;local a7={[22]=18,[31]=8,[33]=28,[0]=3,[1]=13,[2]=23,[26]=33,[12]=1,[13]=6,[14]=10,[15]=16,[16]=20,[17]=26,[18]=30,[19]=36,[3]=0,[4]=2,[5]=4,[6]=7,[7]=9,[8]=12,[9]=14,[10]=17,[20]=19,[21]=22,[23]=24,[24]=27,[25]=29,[27]=32,[32]=34,[34]=37,[11]=5,[28]=11,[29]=15,[30]=21,[35]=25,[36]=31,[37]=35}local a8={[0]='ABC','ABx','ABC','ABC','ABC','ABx','ABC','ABx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','AsBx','ABC','ABC','ABC','ABx','ABC'}local a9={[0]={b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgR'},{b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgU'},{b='OpArgR',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgN',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgN',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgU',c='OpArgN'}}local function aa(ab,s,e,d)local ac=0;for i=s,e,d do ac=ac+string.byte(ab,i,i)*256^(i-s)end;return ac end;local function ad(ae,af,ag,ah)local ai=(-1)^bit.rshift(ah,7)local aj=bit.rshift(ag,7)+bit.lshift(bit.band(ah,0x7F),1)local ak=ae+bit.lshift(af,8)+bit.lshift(bit.band(ag,0x7F),16)local al=1;if aj==0 then if ak==0 then return ai*0 else al=0;aj=1 end elseif aj==0x7F then if ak==0 then return ai*1/0 else return ai*0/0 end end;return ai*2^(aj-127)*(1+al/2^23)end;local function am(ae,af,ag,ah,an,ao,ap,aq)local ai=(-1)^bit.rshift(aq,7)local aj=bit.lshift(bit.band(aq,0x7F),4)+bit.rshift(ap,4)local ak=bit.band(ap,0x0F)*2^48;local al=1;ak=ak+ao*2^40+an*2^32+ah*2^24+ag*2^16+af*2^8+ae;if aj==0 then if ak==0 then return ai*0 else al=0;aj=1 end elseif aj==0x7FF then if ak==0 then return ai*1/0 else return ai*0/0 end end;return ai*2^(aj-1023)*(al+ak/2^52)end;local function ar(ab,s,e)return aa(ab,s,e-1,1)end;local function as(ab,s,e)return aa(ab,e-1,s,-1)end;local function at(ab,s)return ad(string.byte(ab,s,s+3))end;local function au(ab,s)local ae,af,ag,ah=string.byte(ab,s,s+3)return ad(ah,ag,af,ae)end;local function av(ab,s)return am(string.byte(ab,s,s+7))end;local function aw(ab,s)local ae,af,ag,ah,an,ao,ap,aq=string.byte(ab,s,s+7)return am(aq,ap,ao,an,ah,ag,af,ae)end;local ax={[4]={little=at,big=au},[8]={little=av,big=aw}}local function ay(S)local az=S.index;local aA=string.byte(S.source,az,az)S.index=az+1;return aA end;local function aB(S,aC)local aD=S.index+aC;local aE=string.sub(S.source,S.index,aD-1)S.index=aD;return aE end;local function aF(S)local aC=S:s_szt()local aE;if aC~=0 then aE=string.sub(aB(S,aC),1,-2)end;return aE end;local function aG(aC,aH)return function(S)local aD=S.index+aC;local aI=aH(S.source,S.index,aD)S.index=aD;return aI end end;local function aJ(aC,aH)return function(S)local aK=aH(S.source,S.index)S.index=S.index+aC;return aK end end;local function aL(S)local aM=S:s_int()local aN={}for i=1,aM do local aO=S:s_ins()local aP=bit.band(aO,0x3F)local aQ=a8[aP]local aR=a9[aP]local aS={value=aO,op=a7[aP],A=bit.band(bit.rshift(aO,6),0xFF)}if aQ=='ABC'then aS.B=bit.band(bit.rshift(aO,23),0x1FF)aS.C=bit.band(bit.rshift(aO,14),0x1FF)aS.is_KB=aR.b=='OpArgK'and aS.B>0xFF;aS.is_KC=aR.c=='OpArgK'and aS.C>0xFF elseif aQ=='ABx'then aS.Bx=bit.band(bit.rshift(aO,14),0x3FFFF)aS.is_K=aR.b=='OpArgK'elseif aQ=='AsBx'then aS.sBx=bit.band(bit.rshift(aO,14),0x3FFFF)-131071 end;aN[i]=aS end;return aN end;local function aT(S)local aM=S:s_int()local aU={}for i=1,aM do local aV=ay(S)local k;if aV==1 then k=ay(S)~=0 elseif aV==3 then k=S:s_num()elseif aV==4 then k=aF(S)end;aU[i]=k end;return aU end;local function aW(S,ab)local aM=S:s_int()local aX={}for i=1,aM do aX[i]=a5(S,ab)end;return aX end;local function aY(S)local aM=S:s_int()local aZ={}for i=1,aM do aZ[i]=S:s_int()end;return aZ end;local function a_(S)local aM=S:s_int()local b0={}for i=1,aM do b0[i]={varname=aF(S),startpc=S:s_int(),endpc=S:s_int()}end;return b0 end;local function b1(S)local aM=S:s_int()local b2={}for i=1,aM do b2[i]=aF(S)end;return b2 end;function a5(S,b3)local b4={}local ab=aF(S)or b3;b4.source=ab;S:s_int()S:s_int()b4.numupvals=ay(S)b4.numparams=ay(S)ay(S)ay(S)b4.code=aL(S)b4.const=aT(S)b4.subs=aW(S,ab)b4.lines=aY(S)a_(S)b1(S)for _,v in ipairs(b4.code)do if v.is_K then v.const=b4.const[v.Bx+1]else if v.is_KB then v.const_B=b4.const[v.B-0xFF]end;if v.is_KC then v.const_C=b4.const[v.C-0xFF]end end end;return b4 end;function a3(ab)local b5;local b6;local b7;local b8;local b9;local ba;local bb;local bc={index=1,source=ab}assert(aB(bc,4)=='\27Lua','invalid Lua signature')assert(ay(bc)==0x51,'invalid Lua version')assert(ay(bc)==0,'invalid Lua format')b6=ay(bc)~=0;b7=ay(bc)b8=ay(bc)b9=ay(bc)ba=ay(bc)bb=ay(bc)~=0;b5=b6 and ar or as;bc.s_int=aG(b7,b5)bc.s_szt=aG(b8,b5)bc.s_ins=aG(b9,b5)if bb then bc.s_num=aG(ba,b5)elseif ax[ba]then bc.s_num=aJ(ba,ax[ba][b6 and'little'or'big'])else error('unsupported float size')end;return a5(bc,'@virtual')end;local function bd(be,bf)for i,bg in pairs(be)do if bg.index>=bf then bg.value=bg.store[bg.index]bg.store=bg;bg.index='value'be[i]=nil end end end;local function bh(be,bf,bi)local bj=be[bf]if not bj then bj={index=bf,store=bi}be[bf]=bj end;return bj end;local function bk(...)return select('#',...),{...}end;local function bl(bm,bn)local ab=bm.source;local bo=bm.lines[bm.pc-1]local b3,bp,bq=string.match(bn,'^(.-):(%d+):%s+(.+)')local br='%s:%i: [%s:%i] %s'bo=bo or'0'b3=b3 or'?'bp=bp or'0'bq=bq or bn;error(string.format(br,ab,bo,b3,bp,bq),0)end;local function bs(bm)local aN=bm.code;local bt=bm.subs;local bu=bm.env;local bv=bm.upvals;local bw=bm.varargs;local bx=-1;local by={}local bi=bm.stack;local bz=bm.pc;while true do local bA=aN[bz]local aP=bA.op;bz=bz+1;if aP<18 then if aP<8 then if aP<3 then if aP<1 then for i=bA.A,bA.B do bi[i]=nil end elseif aP>1 then local bg=bv[bA.B]bi[bA.A]=bg.store[bg.index]else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB+bC end elseif aP>3 then if aP<6 then if aP>4 then local A=bA.A;local B=bA.B;local bf;if bA.is_KC then bf=bA.const_C else bf=bi[bA.C]end;bi[A+1]=bi[B]bi[A]=bi[B][bf]else bi[bA.A]=bu[bA.const]end elseif aP>6 then local bf;if bA.is_KC then bf=bA.const_C else bf=bi[bA.C]end;bi[bA.A]=bi[bA.B][bf]else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB-bC end else bi[bA.A]=bi[bA.B]end elseif aP>8 then if aP<13 then if aP<10 then bu[bA.const]=bi[bA.A]elseif aP>10 then if aP<12 then local A=bA.A;local B=bA.B;local C=bA.C;local bD;local bE,bF;if B==0 then bD=bx-A else bD=B-1 end;bE,bF=bk(bi[A](unpack(bi,A+1,A+bD)))if C==0 then bx=A+bE-1 else bE=C-1 end;for i=1,bE do bi[A+i-1]=bF[i]end else local bg=bv[bA.B]bg.store[bg.index]=bi[bA.A]end else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB*bC end elseif aP>13 then if aP<16 then if aP>14 then local A=bA.A;local B=bA.B;local bD;if B==0 then bD=bx-A else bD=B-1 end;bd(by,0)return bk(bi[A](unpack(bi,A+1,A+bD)))else local bf,bG;if bA.is_KB then bf=bA.const_B else bf=bi[bA.B]end;if bA.is_KC then bG=bA.const_C else bG=bi[bA.C]end;bi[bA.A][bf]=bG end elseif aP>16 then bi[bA.A]={}else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB/bC end else bi[bA.A]=bA.const end else local A=bA.A;local bH=bi[A+2]local bf=bi[A]+bH;local bI=bi[A+1]local bJ;if bH==math.abs(bH)then bJ=bf<=bI else bJ=bf>=bI end;if bJ then bi[bA.A]=bf;bi[bA.A+3]=bf;bz=bz+bA.sBx end end elseif aP>18 then if aP<28 then if aP<23 then if aP<20 then bi[bA.A]=#bi[bA.B]elseif aP>20 then if aP<22 then local A=bA.A;local B=bA.B;local bK={}local aM;if B==0 then aM=bx-A+1 else aM=B-1 end;for i=1,aM do bK[i]=bi[A+i-1]end;bd(by,0)return aM,bK else local aE=bi[bA.B]for i=bA.B+1,bA.C do aE=aE..bi[i]end;bi[bA.A]=aE end else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB%bC end elseif aP>23 then if aP<26 then if aP>24 then bd(by,bA.A)else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB==bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 end elseif aP>26 then local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB<bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB^bC end else bi[bA.A]=bA.B~=0;if bA.C~=0 then bz=bz+1 end end elseif aP>28 then if aP<33 then if aP<30 then local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB<=bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 elseif aP>30 then if aP<32 then local aX=bt[bA.Bx+1]local bL=aX.numupvals;local bM;if bL~=0 then bM={}for i=1,bL do local bN=aN[bz+i-1]if bN.op==a7[0]then bM[i-1]=bh(by,bN.B,bi)elseif bN.op==a7[4]then bM[i-1]=bv[bN.B]end end;bz=bz+bL end;bi[bA.A]=a4(aX,bu,bM)else local A=bA.A;local B=bA.B;if not bi[B]==(bA.C~=0)then bz=bz+1 else bi[A]=bi[B]end end else bi[bA.A]=-bi[bA.B]end elseif aP>33 then if aP<36 then if aP>34 then local A=bA.A;local aM=bA.B;if aM==0 then aM=bw.size;bx=A+aM-1 end;for i=1,aM do bi[A+i-1]=bw.list[i]end else local A=bA.A;local bO,bI,bH;bO=assert(tonumber(bi[A]),'`for` initial value must be a number')bI=assert(tonumber(bi[A+1]),'`for` limit must be a number')bH=assert(tonumber(bi[A+2]),'`for` step must be a number')bi[A]=bO-bH;bi[A+1]=bI;bi[A+2]=bH;bz=bz+bA.sBx end elseif aP>36 then local A=bA.A;local C=bA.C;local aM=bA.B;local bP=bi[A]local bQ;if aM==0 then aM=bx-A end;if C==0 then C=bA[bz].value;bz=bz+1 end;bQ=(C-1)*a6;for i=1,aM do bP[i+bQ]=bi[A+i]end else bi[bA.A]=not bi[bA.B]end else if not bi[bA.A]==(bA.C~=0)then bz=bz+1 end end else local A=bA.A;local aH=bi[A]local bR=bi[A+1]local bf=bi[A+2]local bS=A+3;local bK;bi[bS+2]=bf;bi[bS+1]=bR;bi[bS]=aH;bK={aH(bR,bf)}for i=1,bA.C do bi[bS+i-1]=bK[i]end;if bi[bS]~=nil then bi[A+2]=bi[bS]else bz=bz+1 end end else bz=bz+bA.sBx end;bm.pc=bz end end;function a4(bR,bu,b2)local bT=bR.code;local bU=bR.subs;local bV=bR.lines;local bW=bR.source;local bX=bR.numparams;local function bY(...)local bi={}local bZ={}local b_=0;local c0,c1=bk(...)local bm;local c2,bn,bK;for i=1,bX do bi[i-1]=c1[i]end;if bX<c0 then b_=c0-bX;for i=1,b_ do bZ[i]=c1[bX+i]end end;bm={varargs={list=bZ,size=b_},code=bT,subs=bU,lines=bV,source=bW,env=bu,upvals=b2,stack=bi,pc=1}c2,bn,bK=pcall(bs,bm,...)if c2 then return unpack(bK,1,bn)else bl(bm,bn)end;return end;return bY end;return function(c3,bu)return a4(a3(c3),bu or fev(0))end end)();local karrotlIIllIIl='\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110';local karrotlIIlIIIl="\104\78\90\56\110\71\120\101\74\113\78\48\106\80\111\57\112\54\118\86\47\74\73\69\106\115\55\72\101\88\47\51\102\72\66\71\88\119\116\99\48\98\50\47\47\80\104\87\104\66\101\118\66\72\70\85\109\112\110\80\108\86\87\106\101\73\66\118\110\72\48\120\99\109\47\121\67\104\83\108\108\78\69\90\89\75\51\106\101\119\86\70\85\88\68\84\48\80\43\80\119\100\101\104\115\50\88\121\122\47\75\70\47\71\121\52\102\85\98\118\55\90\102\101\75\52\111\48\55\81\104\56\55\73\97\69\121\43\68\52\68\79\53\102\77\70\52\55\109\119\88\104\47\112\65\118\48\104\69\108\71\78\113\67\51\53\68\73\107\82\76\114\90\115\54\108\108\105\87\56\69\85\112\106\122\86\105\114\70\99\89\80\107\90\72\43\90\112\109\99\65\56\67\75\97\104\120\48\53\121\69\89\76\112\81\70\115\76\48\87\116\109\121\84\54\76\66\101\78\74\111\51\118\54\75\48\121\117\105\73\99\76\99\104\77\72\99\70\88\110\56\78\53\53\104\68\104\113\73\54\54\108\47\54\106\105\115\102\56\114\70\66\85\118\70\56\121\86\57\49\53\65\78\75\97\100\115\121\71\108\108\86\69\112\81\87\48\66\81\122\100\120\52\78\65\71\116\121\79\75\56\98\111\66\116\52\108\53\48\65\120\79\114\119\118\109\97\52\76\65\71\88\43\121\52\77\49\47\119\43\66\118\112\82\50\71\77\43\83\49\83\84\111\86\57\115\110\98\90\68\50\47\114\52\88\79\74\120\54\120\56\98\71\108\107\81\121\89\115\51\104\109\57\48\104\69\106\86\49\47\105\67\101\103\50\97\85\87\109\49\84\56\79\75\80\73\118\55\78\101\117\114\109\74\57\88\117\102\52\57\50\52\52\122\66\47\112\81\54\69\71\110\121\87\118\77\55\48\109\122\71\113\98\118\49\51\107\106\105\116\117\110\87\118\50\108\101\69\122\47\112\88\97\82\118\109\84\105\72\111\79\116\57\75\98\115\108\97\104\48\111\78\66\47\79\87\67\101\82\43\72\69\105\85\107\56\101\103\85\74\112\87\84\54\50\77\121\43\69\53\55\67\114\79\55\68\112\109\80\80\117\106\109\116\83\74\104\49\78\55\121\79\119\120\51\84\114\84\83\67\120\76\98\57\88\117\112\66\101\102\69\113\72\85\115\99\66\89\78\47\87\49\98\120\70\77\67\47\101\111\108\89\50\122\70\56\57\83\68\115\80\121\73\76\105\108\77\84\113\55\69\76\66\71\87\87\106\73\106\71\104\55\68\76\48\77\114\69\111\82\109\115\84\121\50\113\77\101\111\89\56\57\88\77\107\112\114\117\51\66\121\79\121\66\112\120\57\113\49\72\109\73\110\111\116\119\98\112\79\98\121\81\79\116\80\88\90\113\115\72\97\90\105\54\98\56\87\70\78\47\112\48\90\56\57\43\50\108\120\90\97\121\115\74\112\66\122\52\102\69\106\99\67\56\77\105\120\117\111\115\97\65\71\68\104\86\112\106\98\98\109\65\48\118\68\68\104\97\69\88\112\119\83\75\87\67\116\79\106\107\103\52\116\114\111\106\84\78\122\80\99\99\110\97\98\104\84\51\51\90\71\54\73\103\71\111\104\102\116\120\116\122\104\66\118\83\83\43\72\98\114\119\77\109\65\47\55\86\56\68\84\105\109\82\115\65\57\100\50\65\116\53\101\89\109\119\57\73\97\116\111\75\104\87\86\66\116\109\71\88\66\106\110\74\99\71\48\83\106\47\104\110\81\75\75\119\84\111\111\121\80\122\79\54\111\116\65\87\49\115\71\119\76\54\121\117\48\115\117\48\97\109\57\43\48\97\111\66\119\85\69\76\81\110\106\65\50\113\116\84\102\51\72\69\74\82\76\71\79\90\100\99\47\98\119\87\100\106\110\47\106\106\120\87\88\117\116\80\104\51\72\85\122\102\115\49\84\86\54\80\86\78\116\47\51\66\53\98\99\88\47\103\116\73\109\118\50\48\85\65\116\108\52\108\116\83\70\102\105\100\98\98\65\56\107\106\56\117\105\117\85\106\51\98\121\56\115\107\79\109\97\117\110\73\48\66\67\99\120\114\87\89\76\73\66\47\88\56\47\97\84\76\66\84\108\78\97\102\120\49\73\79\54\68\52\43\48\106\43\121\102\85\100\70\109\118\107\87\51\56\100\104\54\101\112\85\113\71\53\116\47\53\111\69\86\120\57\110\107\53\90\69\47\79\90\50\113\79\65\97\112\76\83\88\83\74\109\67\116\66\51\114\50\104\87\72\86\67\56\107\115\113\115\78\50\97\104\121\71\97\66\115\78\107\50\106\84\100\66\112\75\68\43\53\118\114\114\77\49\66\80\83\78\109\79\52\116\51\108\86\99\100\85\48\102\69\104\73\51\56\120\102\71\48\121\83\75\76\49\54\111\77\108\88\88\105\88\106\57\105\57\110\86\87\47\57\71\72\113\56\89\50\70\116\83\76\49\104\86\79\43\122\53\86\84\114\97\88\67\104\47\80\90\43\118\103\50\114\77\98\57\84\88\112\112\81\80\77\84\54\122\51\89\122\81\89\52\98\75\115\101\105\99\90\50\75\82\104\55\56\49\85\118\52\84\51\115\122\116\119\99\118\120\82\90\68\86\111\120\121\77\74\50\78\79\87\87\74\72\80\86\97\82\55\87\97\55\112\98\66\53\74\100\72\51\54\86\117\55\74\100\121\43\83\50\79\108\73\86\90\57\86\65\50\103\81\55\68\121\113\114\105\43\67\53\49\118\72\105\65\111\57\107\99\86\85\76\117\69\117\43\54\113\73\86\83\49\75\53\119\51\53\57\68\79\67\49\78\106\83\66\106\117\118\48\115\69\78\79\52\99\120\109\56\119\107\76\85\90\99\104\79\120\76\88\104\118\121\77\109\80\109\66\68\76\82\97\80\119\75\72\114\89\77\72\71\73\72\83\90\114\109\99\72\97\49\48\74\83\70\82\121\116\71\90\120\48\86\74\88\49\120\111\100\57\43\86\86\85\106\115\80\114\51\55\84\113\90\51\55\103\101\118\107\71\87\70\48\67\115\118\87\98\104\107\119\108\116\65\50\48\71\67\66\56\88\68\118\51\67\101\117\113\51\84\47\79\108\65\113\78\90\56\65\112\103\117\79\98\90\101\120\43\56\108\111\80\121\117\47\104\90\74\57\120\77\115\79\68\122\103\110\84\52\69\49\116\114\52\81\71\55\111\48\113\51\114\65\117\120\104\88\49\115\89\117\112\79\65\70\103\108\101\81\75\97\114\48\71\84\43\70\73\103\122\83\102\100\114\97\87\47\108\120\119\67\69\88\100\89\100\122\49\104\88\110\47\55\100\108\57\121\57\103\83\68\97\120\120\79\109\77\104\90\89\120\99\75\84\117\114\84\97\80\106\120\72\71\77\51\105\105\106\81\84\121\120\102\100\86\100\85\110\77\79\100\88\86\55\74\67\99\117\76\114\68\67\114\87\74\73\98\115\111\49\88\121\108\109\87\66\115\69\57\98\87\79\48\66\86\65\102\77\49\84\110\114\70\86\74\113\67\57\97\90\85\121\77\53\73\106\49\84\77\88\77\116\118\85\43\101\116\53\86\116\71\80\52\105\86\83\74\66\75\90\56\98\87\52\102\54\90\43\68\101\102\89\71\67\120\89\52\114\115\51\66\118\116\99\66\118\81\83\51\104\80\51\70\102\77\43\84\68\99\101\72\86\114\109\74\108\70\73\101\77\71\68\71\47\75\65\118\79\68\105\54\71\108\56\73\107\99\77\119\47\51\118\84\101\73\114\100\78\67\48\84\115\98\72\57\79\74\82\105\56\79\99\90\110\118\87\113\74\110\88\89\97\79\76\47\67\79\103\121\76\102\85\67\121\81\98\87\43\116\121\68\90\119\106\119\106\70\87\80\101\115\103\90\66\109\74\88\90\111\111\85\113\84\118\55\113\51\52\81\56\52\51\98\113\114\108\73\47\108\52\70\105\53\48\119\106\43\51\73\112\113\77\77\55\120\72\48\65\71\108\52\98\110\66\76\78\51\115\97\50\110\114\75\69\73\119\86\50\73\121\76\118\65\105\101\97\78\74\86\50\120\116\83\101\69\56\113\54\90\100\113\65\48\104\69\90\69\69\72\87\97\68\81\67\102\122\56\119\105\100\121\49\88\57\78\112\107\108\86\107\80\120\122\116\111\109\56\50\79\74\111\88\90\54\82\47\120\115\49\78\55\98\111\114\72\84\78\79\85\101\97\103\103\89\105\76\109\47\102\57\120\99\106\106\119\55\109\56\115\116\111\65\108\77\51\110\66\121\85\118\81\56\113\107\70\112\77\86\86\105\80\112\83\121\85\110\115\55\108\87\82\100\65\117\78\51\89\85\85\56\85\52\108\56\112\102\109\67\100\110\106\73\122\49\69\50\66\108\74\74\74\52\51\47\52\103\111\80\53\74\108\104\69\110\79\113\98\53\85\104\54\70\112\55\69\79\74\53\102\57\86\114\87\83\80\109\87\116\118\82\83\105\69\109\51\111\43\75\99\54\50\120\102\65\108\75\83\120\56\112\74\57\80\116\105\114\75\78\67\104\97\99\69\49\120\55\78\112\74\122\78\43\88\75\108\110\99\114\68\57\70\86\66\77\51\51\108\111\116\69\108\117\98\43\73\67\75\47\80\106\83\47\78\75\103\80\53\99\106\74\86\87\112\86\85\48\66\87\53\67\98\104\115\88\104\100\97\69\80\89\51\89\80\43\67\120\103\66\112\116\102\112\74\49\80\72\72\114\115\65\118\81\85\70\82\97\86\66\112\118\88\110\98\76\102\65\107\121\107\47\101\48\102\90\81\110\112\75\105\100\117\85\114\68\105\112\86\107\52\81\88\97\115\47\52\89\70\105\69\86\49\51\68\116\78\111\55\111\89\89\117\80\79\107\70\56\77\106\106\97\83\85\50\68\90\86\120\90\119\105\74\121\107\122\107\104\111\113\110\116\102\57\82\100\115\101\109\78\68\121\43\80\116\108\74\115\51\90\105\85\85\82\109\86\103\116\114\75\77\122\97\51\72\79\115\81\48\49\89\83\99\67\87\54\86\68\113\75\105\53\56\86\105\105\48\72\86\85\81\122\56\111\97\97\119\70\108\114\43\98\79\85\114\82\118\104\68\105\121\89\105\100\116\54\103\51\49\99\90\51\115\120\77\81\74\70\50\111\74\85\98\72\103\111\49\57\51\119\69\70\105\86\84\68\78\113\98\116\43\99\49\79\43\51\99\82\66\119\103\120\121\70\120\113\108\54\122\117\100\108\113\117\75\53\113\111\104\108\75\74\79\76\120\74\80\52\89\87\119\51\80\82\57\121\75\88\105\112\56\53\112\68\85\97\43\110\76\97\101\72\75\88\107\81\83\113\43\86\114\98\79\52\43\71\106\70\78\56\117\103\67\109\79\117\49\49\55\120\70\49\108\76\117\73\121\122\85\71\51\65\54\71\48\88\110\77\85\111\52\70\74\49\68\65\57\88\74\113\107\77\67\86\106\75\53\117\111\66\76\49\113\106\87\110\75\102\75\111\113\49\86\82\120\73\111\65\75\111\120\68\109\73\86\112\122\104\57\72\97\98\79\51\56\74\85\84\104\52\57\67\68\77\117\110\103\110\97\109\122\112\105\103\100\51\112\112\43\104\75\109\78\83\88\82\109\70\81\48\84\70\49\118\100\107\56\52\79\83\76\120\111\119\97\52\87\107\54\103\43\106\55\49\86\90\86\115\117\103\85\117\54\43\87\110\47\81\83\48\120\55\98\82\56\89\117\116\87\88\47\47\119\54\72\72\83\108\109\88\111\90\73\55\77\76\103\54\121\69\80\79\117\88\68\52\103\111\80\71\107\70\87\81\122\101\89\85\113\119\71\101\84\76\119\103\82\118\77\84\51\101\89\99\84\82\103\88\70\88\85\72\47\119\71\83\121\90\121\113\79\68\89\85\87\56\122\57\103\90\66\74\77\54\65\47\106\99\71\111\122\83\100\98\98\105\118\102\86\88\47\117\74\117\71\73\111\51\80\43\118\51\110\78\119\67\50\78\100\77\104\85\75\89\116\106\113\120\57\79\56\99\115\122\83\84\102\105\119\108\119\66\99\65\98\79\112\76\74\103\90\118\117\115\72\54\73\77\113\72\103\120\77\108\56\73\66\111\51\107\52\78\71\78\99\76\79\106\87\71\109\105\82\120\47\71\97\82\47\57\70\84\68\80\53\110\80\84\121\70\88\106\110\69\112\118\65\121\50\74\109\70\67\106\111\75\70\105\53\116\112\100\73\74\120\119\117\82\72\115\57\102\115\76\118\99\88\54\97\65\69\97\120\78\80\88\78\73\54\51\111\78\98\111\80\122\103\114\75\87\117\71\106\122\112\118\75\100\57\66\68\105\74\70\106\100\73\85\71\116\43\103\102\99\49\107\66\97\104\47\83\54\55\66\116\73\99\76\83\69\120\54\76\66\88\100\86\43\117\119\66\99\121\43\110\54\116\85\98\108\55\67\110\79\120\72\80\74\75\73\110\107\72\90\116\88\86\81\75\73\82\74\72\116\122\73\122\86\97\65\104\104\53\56\100\101\120\54\48\72\51\70\49\85\76\82\118\100\88\102\57\86\67\87\88\56\67\87\117\53\111\49\68\75\87\97\71\98\88\103\72\111\54\97\75\89\47\71\112\97\111\108\55\70\75\118\111\43\72\100\108\119\113\71\116\81\102\67\111\82\81\118\65\103\67\69\111\110\48\48\48\80\118\113\80\90\53\117\108\85\88\107\52\78\77\97\54\108\105\73\72\100\80\100\75\112\90\101\114\67\121\48\115\100\54\118\49\65\78\105\66\98\82\76\107\43\104\102\78\73\106\81\117\113\43\74\71\48\66\50\50\54\78\119\82\53\55\52\112\76\117\71\81\83\99\68\85\110\71\85\57\105\43\47\121\113\98\83\98\65\106\106\78\47\120\100\73\108\117\90\53\70\47\103\73\119\76\89\105\118\118\122\88\57\106\112\70\100\111\77\47\115\97\51\80\120\67\65\122\89\57\85\55\76\89\121\106\111\121\57\114\82\116\85\75\83\87\116\122\72\67\114\53\56\79\101\67\74\118\57\75\69\82\116\101\113\67\102\88\68\74\55\73\53\115\109\68\67\107\106\77\107\115\87\114\57\119\99\84\113\108\43\68\43\100\54\49\50\48\79\104\86\104\71\49\84\109\104\66\117\54\117\90\121\121\105\53\101\102\76\72\66\119\74\109\97\72\52\55\77\68\73\83\115\120\57\69\79\52\88\87\110\115\86\81\103\52\66\68\104\56\116\107\100\97\88\90\69\52\105\67\43\65\87\80\102\76\122\99\56\50\87\82\65\70\69\102\98\110\69\90\116\113\98\49\98\65\74\103\116\82\120\110\110\97\109\84\107\122\82\122\52\79\110\101\66\107\49\102\100\55\110\120\48\98\86\48\120\84\68\90\71\49\69\73\49\53\53\112\48\114\80\71\100\77\53\53\70\98\100\52\79\85\84\68\71\84\86\70\87\48\98\57\99\98\101\82\85\105\49\66\118\89\67\120\66\114\106\115\50\47\47\54\112\50\72\52\77\102\55\90\71\71\109\49\105\81\115\81\105\80\109\109\80\120\70\103\77\82\74\90\87\97\114\86\114\50\69\119\109\56\107\78\90\84\88\121\113\107\112\67\68\81\69\53\53\120\81\65\71\88\116\84\51\80\112\43\84\120\72\77\121\111\43\43\108\79\70\113\68\84\117\67\69\89\76\77\54\52\72\50\108\98\77\77\86\68\106\109\110\116\72\55\73\99\48\74\102\54\48\122\83\89\105\84\106\48\80\57\89\57\71\109\116\84\108\117\66\53\110\56\115\82\57\87\80\110\77\82\56\43\82\74\57\103\75\69\103\76\55\104\74\66\89\89\86\104\70\49\74\101\89\72\100\68\113\52\77\78\117\115\97\47\88\107\49\43\68\83\110\109\76\113\88\116\79\69\88\53\86\47\66\57\117\114\104\76\115\109\99\79\43\87\53\70\55\57\73\80\86\51\89\119\97\87\117\115\77\101\112\70\52\89\73\56\118\101\68\80\68\104\116\73\72\57\52\82\70\49\67\105\104\57\102\117\56\75\102\70\87\115\107\82\119\122\49\72\80\84\107\81\74\69\98\103\52\108\120\48\43\77\117\55\72\115\82\111\78\74\109\56\90\121\65\65\55\101\115\104\106\72\98\53\69\85\106\108\57\87\98\53\83\100\78\117\53\104\53\71\76\97\113\65\116\74\86\69\122\111\99\65\75\99\56\85\86\105\68\66\54\120\113\77\47\81\71\50\69\122\113\66\99\84\103\90\84\85\52\100\50\72\89\75\75\52\122\109\80\52\65\52\81\118\78\99\73\67\84\120\116\109\73\47\72\47\103\82\69\74\89\103\69\87\106\73\115\56\85\122\103\106\52\101\66\49\49\120\49\86\80\120\103\118\69\50\79\82\52\77\53\67\48\104\72\102\66\78\66\98\98\68\55\53\54\97\121\90\53\103\69\118\116\80\116\79\50\117\97\78\104\108\86\84\119\76\89\70\56\120\53\104\55\106\114\50\78\114\78\50\110\69\98\103\50\99\113\69\79\99\53\120\68\75\50\120\57\110\105\55\118\81\105\90\70\73\108\66\68\69\111\100\109\72\75\120\113\67\121\43\103\108\90\103\103\105\57\90\118\109\57\75\106\101\80\111\75\112\105\108\68\81\56\83\109\109\114\117\83\74\74\90\117\98\118\49\101\73\98\74\108\108\110\71\83\54\106\69\103\111\120\52\97\89\72\43\71\89\80\84\50\119\73\103\67\71\47\70\76\113\122\73\120\111\121\52\54\90\54\83\119\53\99\111\101\119\121\118\70\50\114\84\97\81\72\101\89\106\86\48\105\107\77\117\87\77\79\87\106\121\106\54\97\111\105\114\110\80\120\86\57\99\90\53\101\104\53\112\82\78\98\84\75\56\114\121\70\85\97\101\105\49\106\82\107\77\114\102\82\85\84\122\52\100\53\120\101\51\89\120\98\118\86\53\103\106\117\85\106\65\67\88\77\90\83\48\56\79\119\47\65\51\56\97\110\48\108\56\49\65\108\103\104\122\82\87\43\104\54\115\72\83\101\68\54\51\104\82\52\72\66\80\48\105\111\122\101\48\69\115\115\48\81\113\115\101\69\112\47\108\122\83\51\112\53\89\102\88\76\90\79\57\75\87\86\115\72\71\85\99\47\56\108\109\68\76\67\74\106\116\68\77\68\81\119\72\48\80\53\47\119\75\108\80\49\117\90\103\79\90\112\50\120\87\119\57\80\101\53\74\89\102\100\120\83\112\43\85\78\89\117\57\97\50\107\86\82\69\53\52\104\54\107\121\43\118\78\109\118\79\104\57\115\119\75\57\120\108\110\75\104\83\88\77\88\107\81\105\48\120\89\79\77\90\99\57\84\103\49\118\113\109\111\89\75\110\97\52\83\115\78\98\111\98\68\77\115\99\54\97\110\79\85\102\57\71\56\101\111\56\87\111\79\90\53\86\76\47\117\76\74\116\117\55\106\51\70\50\73\98\115\47\80\117\75\110\108\50\56\98\98\80\105\99\54\73\85\52\50\67\72\88\57\85\115\86\68\69\54\49\79\67\84\49\54\52\84\118\71\113\102\70\86\48\83\122\106\88\65\114\55\84\121\43\105\100\114\98\109\56\111\102\112\57\107\99\103\78\86\108\49\85\122\52\112\52\87\65\73\73\119\110\56\112\105\68\83\115\114\86\67\70\107\121\68\120\116\56\73\109\115\101\104\76\98\80\121\98\90\69\110\50\108\66\49\67\68\81\115\67\97\104\73\108\104\105\51\89\118\53\121\76\43\76\101\108\47\69\85\108\106\102\54\54\73\106\121\86\48\97\76\79\77\68\66\97\90\116\82\52\56\101\88\88\115\98\49\81\81\119\88\105\73\121\97\86\51\54\73\71\101\87\117\112\121\85\90\98\81\109\70\99\115\56\113\43\117\80\117\84\98\116\50\65\90\52\47\73\88\116\88\76\48\89\67\120\107\83\71\122\67\113\69\72\110\100\76\82\49\106\88\113\116\86\85\66\98\108\88\119\121\74\65\56\116\97\74\56\121\110\57\71\83\43\65\103\87\80\119\50\105\43\87\54\47\109\83\100\65\114\75\54\67\80\120\72\77\66\103\84\57\80\112\50\88\68\112\55\66\43\103\76\65\83\67\69\120\121\89\97\88\111\43\68\68\110\110\54\65\56\113\114\99\67\90\105\104\89\90\50\77\106\117\86\89\81\87\57\77\77\119\53\110\69\98\67\119\113\51\69\53\85\50\77\114\57\66\68\77\108\66\68\107\116\52\90\65\99\51\113\119\51\82\120\55\113\66\83\82\68\103\108\109\54\88\104\72\72\54\85\115\104\114\50\68\50\102\71\74\106\121\88\69\114\116\71\118\101\99\49\69\121\98\106\115\88\81\97\65\121\50\111\98\71\69\49\68\43\114\68\71\73\71\122\118\118\53\87\56\50\79\69\98\120\73\103\120\119\68\116\43\108\68\69\122\81\107\82\109\77\53\83\87\69\100\47\119\68\113\88\117\87\85\122\51\105\48\89\57\98\111\52\111\115\56\57\65\90\90\65\74\82\74\69\89\105\52\90\98\85\90\103\115\71\76\89\110\89\49\43\49\114\75\115\106\97\121\102\98\108\98\89\55\121\122\56\68\68\65\51\109\48\52\112\110\53\117\105\108\108\77\89\114\73\48\72\85\108\85\48\56\120\80\97\109\89\119\87\109\75\81\119\122\65\85\65\105\51\48\86\83\122\51\82\68\66\52\84\83\79\78\99\119\108\104\49\115\47\71\97\101\72\103\68\67\106\72\52\82\102\112\119\115\83\108\71\101\107\66\56\75\118\106\56\76\97\57\48\99\105\70\82\121\80\103\117\54\122\109\81\111\109\71\87\69\104\115\66\107\68\86\43\111\108\86\83\103\66\50\121\79\47\52\118\105\77\109\51\67\43\83\97\51\56\74\70\68\69\115\89\75\89\103\98\112\78\68\98\53\66\75\54\115\69\57\67\98\114\122\118\85\50\85\81\122\119\76\79\120\108\116\51\98\87\120\103\90\102\98\77\79\68\71\84\75\52\108\87\110\78\113\54\111\47\72\102\71\69\75\68\119\73\72\90\117\71\75\72\79\106\111\80\69\54\108\119\43\86\72\81\52\110\111\68\75\57\68\112\84\56\88\51\43\87\81\68\111\82\73\107\99\70\50\43\82\112\103\110\73\84\98\104\77\107\79\100\116\43\111\87\52\81\89\77\117\112\105\118\119\55\108\57\90\43\89\83\72\88\89\111\85\122\120\100\74\116\106\87\68\76\50\82\99\104\121\116\77\106\81\72\99\89\74\108\120\66\103\43\89\90\98\43\68\84\56\121\107\82\101\77\87\78\72\87\113\43\98\104\87\66\114\105\122\47\48\70\81\85\78\56\104\57\78\102\54\67\81\73\97\78\56\101\74\66\109\69\72\111\43\112\57\99\85\99\74\71\106\82\81\85\55\75\100\74\79\77\66\68\49\117\84\70\104\71\75\67\65\109\110\77\69\74\48\57\70\55\113\70\109\81\70\55\104\119\84\115\54\80\121\47\108\66\53\111\106\55\81\73\47\84\50\81\105\90\70\77\85\103\116\69\112\53\86\57\53\85\80\74\90\50\103\106\119\117\81\86\71\111\97\51\66\73\100\101\77\117\80\80\78\48\105\79\50\65\117\121\119\71\49\82\83\106\68\97\66\66\110\122\87\71\70\69\102\89\56\109\117\67\69\77\54\108\101\113\47\116\102\108\49\82\56\54\49\68\65\56\89\80\70\77\113\122\115\80\111\112\101\111\119\71\113\71\108\100\102\85\119\75\88\74\113\72\81\105\48\48\68\120\66\77\43\77\109\113\57\55\75\98\73\48\108\122\56\75\104\84\118\115\106\53\105\119\116\75\50\111\71\103\76\111\108\51\121\118\100\85\52\86\105\119\112\66\89\79\68\107\103\118\73\80\56\55\82\97\110\72\50\111\88\113\85\75\83\122\116\112\87\47\53\121\121\50\119\112\56\120\57\76\67\104\101\78\85\99\54\75\114\80\113\99\112\53\109\100\65\75\109\120\117\105\52\97\120\85\66\97\65\43\55\117\53\117\114\111\76\49\107\79\104\108\106\105\85\112\50\70\66\69\67\70\81\86\80\70\88\112\73\90\54\97\116\50\71\79\102\85\109\118\73\90\47\79\52\109\51\49\77\68\70\106\118\48\98\113\86\54\117\111\70\109\43\68\85\120\47\105\65\70\67\77\108\70\108\110\75\119\78\88\43\112\122\47\108\110\87\74\99\57\122\122\79\68\112\43\85\120\120\50\98\99\106\90\83\84\82\55\97\112\68\67\89\117\55\73\52\121\80\114\86\103\118\78\50\111\81\57\52\107\76\43\55\66\114\122\87\121\106\108\81\67\72\112\56\109\104\97\48\88\102\89\107\111\104\102\75\81\105\89\98\104\86\97\120\99\70\69\86\50\55\79\107\47\70\89\101\82\56\82\111\67\51\65\74\52\50\73\88\87\72\72\49\88\79\106\113\50\71\101\54\118\48\107\104\106\115\43\70\53\80\104\118\68\120\47\69\84\65\121\47\90\53\82\116\47\80\109\74\118\113\87\79\121\121\100\52\100\98\53\109\120\103\120\43\82\86\118\97\120\116\111\119\90\120\57\101\56\83\118\67\71\56\103\99\55\80\50\84\117\73\86\90\69\110\81\120\87\117\97\89\54\84\73\68\116\82\87\81\71\51\105\111\105\74\84\89\52\110\89\116\107\55\116\101\100\48\122\54\105\106\72\82\89\69\110\99\54\73\53\48\98\73\79\82\90\65\106\103\56\81\74\76\101\119\82\104\122\68\110\66\49\103\87\75\57\75\100\102\74\53\111\111\78\122\97\101\48\75\48\56\106\100\98\113\120\105\88\74\78\101\43\72\67\117\57\68\51\53\116\83\77\53\117\112\65\51\78\116\85\106\98\87\51\79\74\100\109\73\82\72\107\72\109\116\118\114\77\43\111\77\112\119\48\118\116\69\116\69\117\76\69\55\108\47\47\54\65\76\104\87\82\115\83\106\90\122\86\114\52\113\111\109\67\78\49\87\47\52\114\109\101\117\88\66\43\88\55\85\70\89\114\55\52\87\121\43\122\119\112\55\117\97\87\48\112\117\53\121\103\89\43\114\113\122\83\81\122\88\85\54\52\69\67\120\111\101\104\67\90\106\106\68\99\84\107\101\79\86\77\57\54\119\97\116\50\67\119\89\101\120\87\74\114\118\51\74\116\103\105\121\67\54\68\102\111\107\71\97\52\71\84\100\88\65\112\112\109\51\74\72\112\77\66\73\57\68\106\104\77\112\100\54\80\87\107\49\49\81\57\85\75\116\48\108\106\73\77\65\100\101\76\117\122\103\112\85\81\108\47\113\118\68\105\77\82\81\82\103\52\90\89\113\56\84\87\79\103\113\117\57\105\119\84\83\119\67\56\51\47\78\66\109\70\102\43\85\53\110\52\120\48\82\118\107\122\54\81\69\79\83\120\81\48\115\67\86\121\67\52\84\100\87\88\116\119\43\119\114\75\109\105\71\69\70\51\84\81\67\56\103\54\43\65\86\99\43\106\50\84\71\87\100\117\116\112\52\81\56\55\74\110\80\52\71\73\83\49\65\111\111\51\72\86\119\104\102\97\105\113\90\77\114\116\102\54\66\89\47\113\113\50\108\49\102\102\54\99\99\49\65\76\88\102\52\83\47\98\97\100\108\112\87\81\81\47\71\65\113\70\43\74\51\109\115\100\76\85\86\79\122\101\97\77\119\108\73\56\67\115\109\51\55\84\88\111\107\77\120\98\71\120\83\68\65\67\57\98\120\78\79\100\83\99\76\84\75\43\101\115\48\54\76\120\107\121\115\115\100\88\52\120\52\118\117\76\70\50\118\43\118\120\97\49\54\104\121\70\65\72\110\101\65\108\101\48\113\78\52\55\119\84\110\65\70\76\84\122\83\75\74\105\67\79\47\56\69\103\120\82\53\68\78\43\118\54\117\68\118\120\79\114\47\69\97\83\52\49\97\73\115\47\116\77\55\54\81\43\83\54\108\112\99\43\86\73\53\108\87\113\56\113\101\116\81\83\84\80\120\98\90\119\55\107\84\49\72\110\80\83\89\106\118\69\90\49\65\79\85\78\86\55\54\75\117\100\75\120\72\48\49\79\97\102\82\57\119\56\53\74\85\110\105\73\70\55\56\52\120\117\101\69\106\47\101\90\69\67\104\99\122\54\65\109\55\104\53\99\50\98\77\99\98\116\50\53\121\121\105\75\97\54\56\49\103\113\104\119\90\56\51\83\114\80\84\76\68\107\119\51\119\50\48\78\104\99\49\56\70\102\88\117\116\52\68\81\119\84\115\100\122\114\66\50\117\99\67\79\84\99\108\70\47\115\105\65\66\116\68\121\65\57\70\100\97\108\71\97\122\71\50\71\106\84\102\51\49\116\116\90\78\120\76\97\98\75\76\47\122\119\89\103\53\98\114\109\119\105\99\55\90\78\84\49\99\70\90\49\54\69\119\83\98\66\80\122\80\98\77\122\43\98\53\67\90\112\78\53\122\49\71\86\115\83\69\74\114\66\74\116\69\55\86\85\43\69\100\85\57\103\73\76\43\51\101\112\121\84\49\121\114\107\112\76\98\107\70\82\68\81\73\118\77\101\81\51\66\106\89\75\49\51\98\120\74\84\103\100\76\97\66\65\52\52\99\120\55\87\98\99\89\74\87\98\50\66\73\81\90\43\82\99\78\82\57\105\121\113\68\116\76\78\113\87\104\76\87\114\111\111\54\67\122\66\122\55\55\71\116\119\84\105\121\108\55\47\112\121\109\50\117\90\104\119\102\72\57\110\72\43\120\76\70\83\84\69\100\49\68\98\105\89\80\80\86\119\110\114\87\101\69\43\101\88\97\100\51\100\114\112\67\78\74\117\116\56\97\114\74\117\79\121\116\85\89\122\51\53\65\75\75\88\54\105\47\72\99\70\118\105\114\112\111\80\84\114\103\47\105\70\86\85\43\71\79\76\120\86\89\71\119\83\69\70\87\121\103\73\90\71\74\110\48\71\54\121\98\98\57\115\78\43\98\53\74\119\112\73\112\116\43\103\78\115\108\77\89\69\113\115\67\98\114\82\70\100\55\80\98\122\107\77\75\55\105\72\90\75\79\120\113\76\75\75\118\89\69\97\111\98\89\80\75\70\103\101\115\49\73\107\57\84\110\115\50\85\80\117\112\43\113\67\76\103\100\100\67\78\99\82\80\108\86\65\114\121\105\97\79\85\105\85\55\74\112\56\98\74\108\86";local karrotlIIllIll='\97\121\107\116\88\49\78\108\75\108\112\53\99\106\86\111\100\106\111\114\78\107\66\79\77\119\61\61';local karrotlIIllIII='NGI2d3Q8YSp3KmsvYWc9K0c6dw==';local karrotlIIlIIlI=function(a,b)local c=karrotlIIlIlIl(karrotlIIlIllI(a))local d=c["\99\105\112\104\101\114"](c,karrotlIIlIllI(b))return karrotlIIlIllI(d)end;local karrotlIIllIll='\97\121\107\116\88\49\78\108\75\108\112\53\99\106\86\111\100\106\111\114\78\107\66\79\77\119\61\61';local karrotlIIllIll='\97\121\107\116\88\49\78\108\75\108\112\53\99\106\86\111\100\106\111\114\78\107\66\79\77\119\61\61';local karrotlIIllIIl='\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110';local karrotlIIlIIII='OS5nRkJxRlY8XydZaSZ2OXdEb3t7I2EkNmcvbyxdZVYvZy86Mjg=';function karrotlIIlIlll(a,b)local c=karrotlIIlIllI(a,b);local d=karrotlIIllIlI;return c,d end;return karrotlIIlIlII(karrotlIIlIIlI(karrotlIIllIll,karrotlIIlIIIl),getfenv(0))()end)()
